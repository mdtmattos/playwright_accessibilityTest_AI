import { test, expect } from '@playwright/test';
import axios from 'axios';
import { runAccessibilityTest } from '../src/accessibility';
import dotenv from 'dotenv';
dotenv.config();

// Fun√ß√£o para formatar as viola√ß√µes
function formatViolations(violations) {
  return violations.slice(0, 5).map(violation => {
    const affectedElements = violation.nodes.map(node => node.html).join(' | ');
    return `üî¥ **Problema:** ${violation.description}\n‚ÑπÔ∏è **Impacto:** ${violation.impact}\nüìå **Elementos afetados:** ${affectedElements}`;
  }).join('\n\n');
}

// Prompt refinado
function generatePrompt(violations) {
  return `Abaixo est√£o alguns problemas de acessibilidade encontrados em um site. Sua tarefa √© fornecer apenas sugest√µes pr√°ticas e objetivas para corrigir cada problema. N√£o inclua explica√ß√µes longas, apenas solu√ß√µes diretas e aplic√°veis.

Cada problema segue o seguinte formato:  
üî¥ **Problema:** [descri√ß√£o do problema]  
‚ÑπÔ∏è **Impacto:** [n√≠vel de impacto]  
üìå **Elementos afetados:** [c√≥digo do elemento afetado]  

Agora, forne√ßa sugest√µes diretas de corre√ß√£o para cada um dos problemas listados abaixo:  

${violations}

### Estrutura de respostas esperadas:
üî¥ **Problema:** O atributo \`role\` deve ter um valor apropriado para o elemento  
‚úÖ **Solu√ß√£o:** Verifique se o atributo \`role\` est√° correto para o elemento e substitua-o por um valor sem√¢ntico apropriado, como \`combobox\` para campos de entrada interativos.

üî¥ **Problema:** O documento deve ter um landmark principal  
‚úÖ **Solu√ß√£o:** Adicione um elemento \`<main>\` ao documento para definir o conte√∫do principal da p√°gina.

üî¥ **Problema:** Links devem ser distinguidos do texto ao redor de uma forma que n√£o dependa apenas da cor  
‚úÖ **Solu√ß√£o:** Adicione um sublinhado ou outro estilo visual aos links para diferenci√°-los do texto ao redor.`;
}

// Fun√ß√£o para obter insights da HuggingFace
async function getAiInsightsFromHuggingFace(violations) {
  const formattedViolations = formatViolations(violations);
  const prompt = generatePrompt(formattedViolations);

  try {
    const response = await axios.post(
      'https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-2.7B',
      { inputs: prompt },
      { headers: { Authorization: `Bearer ${process.env.HUGGINGFACE_API_KEY}`, 'Content-Type': 'application/json' } }
    );
    const suggestions = response.data[0]?.generated_text.trim() || 'Sem sugest√µes dispon√≠veis.';
    return validateSuggestions(suggestions);
  } catch (error) {
    if (error.response && error.response.data && error.response.data.error === 'Model too busy, unable to get response in less than 60 second(s)') {
      console.error('Modelo ocupado, tentando novamente...');
      // Tentar novamente ap√≥s um pequeno atraso
      await new Promise(resolve => setTimeout(resolve, 5000));
      return getAiInsightsFromHuggingFace(violations);
    } else {
      console.error('Erro ao obter insights da IA:', error);
      return 'Erro ao gerar insights.';
    }
  }
}

// Fun√ß√£o para validar as sugest√µes da IA
function validateSuggestions(suggestions) {
  const validSuggestions = suggestions.split('\n\n').filter(suggestion => {
    return suggestion.includes('üî¥ **Problema:**') && suggestion.includes('‚úÖ **Solu√ß√£o:**');
  });
  return validSuggestions.join('\n\n') || 'Sem sugest√µes v√°lidas dispon√≠veis.';
}

// Fun√ß√£o para obter insights da OpenAI
async function getAiInsightsFromOpenAi(violations) {
  const formattedViolations = formatViolations(violations);
  const prompt = generatePrompt(formattedViolations);

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/engines/davinci-codex/completions',
      {
        prompt: prompt,
        max_tokens: 150,
        n: 1,
        stop: null,
        temperature: 0.7
      },
      { headers: { Authorization: `Bearer ${process.env.OPENAI_API_KEY}`, 'Content-Type': 'application/json' } }
    );
    const suggestions = response.data.choices[0].text.trim() || 'Sem sugest√µes dispon√≠veis.';
    return validateSuggestions(suggestions);
  } catch (error) {
    console.error('Erro ao obter insights da IA:', error);
    return 'Erro ao gerar insights.';
  }
}

// Fun√ß√£o para obter insights da Claude AI
async function getAiInsightsFromClaude(violations: any[]): Promise<string> {
  const prompt = generatePrompt(violations);

  try {
    const response = await axios.post(
      'https://api.anthropic.com/v1/complete',
      {
        model: 'claude-2',
        prompt,
        max_tokens: 300,
        temperature: 0.7
      },
      {
        headers: {
          'x-api-key': process.env.CLAUDE_API_KEY, // API Key do Claude
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.completion.trim() || 'Sem sugest√µes dispon√≠veis.';
  } catch (error) {
    console.error('Erro ao obter insights do Claude:', error);
    return 'Erro ao gerar insights.';
  }
}

// Teste de acessibilidade
test('executar teste de acessibilidade e obter insights da IA', async ({ page }) => {
  test.setTimeout(120000);
  const url = 'https://www.saucedemo.com/'; // URL a ser testado
  const axeResults = await runAccessibilityTest(url);

  if (!Array.isArray(axeResults)) {
    throw new Error('Os resultados do teste de acessibilidade n√£o s√£o um array');
  }

  const aiInsights = await getAiInsightsFromHuggingFace(axeResults);

  console.log('üîç **Resultados da Acessibilidade e Insights da IA**');
  console.log(aiInsights);

  expect(aiInsights).not.toBe('Sem sugest√µes dispon√≠veis.');
});
